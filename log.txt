1/31 12:57 pm
All modules have been implemented, main class need to be finalized.
data_manage.py can be renamed as i/o.py
Currently, the whole i/o flow is as followed:
    1. Read molecule from xyz file.
    2. Dump the molecule information to the format which the qc_engine requires.
    3. Read/get the qc results and dump to the format which the ml_engine requires.
    4. Use ml_engine output for optimization with ASE optimizer. Read/get molecule 
    information to ASE Atom object.
    5. Dump the optimized geometry to the initial xyz file.(append)
    6. Go back to step 1 and start the loop.

To be done:
The all i/o operation can be wrapped in one file.

############################################################################################
3/10
Need to be done:
1. Add selecting function for pbc or nopbc in ML_engine class and Data class
2. Modify data preparation part in Data class

############################################################################################
3/11
Memo:
1. Optimize ML_engine, data, main module. Including data io, read/write/save.
2. Probably need to find out a way to deal with the massive temp files generated by DeePMD.
  (discard or keep?)

############################################################################################
3/15
Memo:
1. Add CUDA supoort for tensorflow
2. Add global optimization support for ase optimizer
3. Find out the possible reason of the abnormal results of optimization (The energy of 
   optimized geometry goes further from the expected geometry.)

############################################################################################
3/20
Memo:
Issue: There is an obvious deviation between the DFT PES and the ML PES. Currently, it essentially 
        fits the optimized ML geometry to the DFT PES which is not the right way to optimize the
        geometry.
Probable reasons: 1. the inital geometry is too good so that the bad guess of ML PES leads to 
                    the wrong direction of optimization. More tests with more configurations
                    should be tried.
                  2. the current optimizaition scheme may have intrinsic problemss. To imporve it, 
                    the GPR paper may give some hints.
To be done:
1. Finalized the global optimization part in optimizer.py.
2. Fix some bugs in main.py related to setting conv_tol for opt and consistensy check.

############################################################################################
3/23
Memo:
Issue: The performance of the ML_QC optimizer is not as good as we expected, using Pyberny optimizer 
        to optimize water molecule, the optimized energy is -75.98 Ha while the ML_QC optimizer gives
        out -75.82 Ha.
Probable reasons: 1. During the training process, only the energy data was trained. Maybe the gradient 
                    data can be trained as the same time.
                  2. Due to the lack of data, the NN may overfit the data. Additional treat should 
                    be applied.
                  3. Changing the loss function from exp to tanh maybe worth a try.